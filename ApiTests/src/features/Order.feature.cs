// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiTests.Src.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class OrderCreationFeature : object, Xunit.IClassFixture<OrderCreationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Order.feature"
#line hidden
        
        public OrderCreationFeature(OrderCreationFeature.FixtureData fixtureData, ApiTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "src/features", "Order creation", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Group of 4 orders 4 starters, 4 mains, and 4 drinks after 19:00")]
        [Xunit.TraitAttribute("FeatureTitle", "Order creation")]
        [Xunit.TraitAttribute("Description", "Group of 4 orders 4 starters, 4 mains, and 4 drinks after 19:00")]
        public void GroupOf4Orders4Starters4MainsAnd4DrinksAfter1900()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Group of 4 orders 4 starters, 4 mains, and 4 drinks after 19:00", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
        testRunner.Given("wiremock testId is test1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Quantity",
                            "Time"});
                table1.AddRow(new string[] {
                            "Starter",
                            "4",
                            "20:00"});
                table1.AddRow(new string[] {
                            "Main",
                            "4",
                            "20:00"});
                table1.AddRow(new string[] {
                            "Drink",
                            "4",
                            "20:00"});
#line 5
        testRunner.Given("new order with the following items is created", ((string)(null)), table1, "Given ");
#line hidden
#line 10
        testRunner.When("get bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
        testRunner.Then("bill should be 58.40", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add dishes to existing order")]
        [Xunit.TraitAttribute("FeatureTitle", "Order creation")]
        [Xunit.TraitAttribute("Description", "Add dishes to existing order")]
        public void AddDishesToExistingOrder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add dishes to existing order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 13
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 14
        testRunner.Given("wiremock testId is test2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Quantity",
                            "Time"});
                table2.AddRow(new string[] {
                            "Starter",
                            "1",
                            "18:00"});
                table2.AddRow(new string[] {
                            "Main",
                            "2",
                            "18:00"});
                table2.AddRow(new string[] {
                            "Drink",
                            "2",
                            "18:00"});
#line 15
        testRunner.Given("new order with the following items is created", ((string)(null)), table2, "Given ");
#line hidden
#line 20
        testRunner.When("get bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
        testRunner.Then("bill should be 23.30", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Quantity",
                            "Time"});
                table3.AddRow(new string[] {
                            "Main",
                            "2",
                            "18:00"});
                table3.AddRow(new string[] {
                            "Drink",
                            "2",
                            "20:00"});
#line 22
        testRunner.When("add to order", ((string)(null)), table3, "When ");
#line hidden
#line 26
        testRunner.When("get bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 27
        testRunner.Then("bill should be 43.70", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Remove dishes from existing order")]
        [Xunit.TraitAttribute("FeatureTitle", "Order creation")]
        [Xunit.TraitAttribute("Description", "Remove dishes from existing order")]
        public void RemoveDishesFromExistingOrder()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Remove dishes from existing order", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
        testRunner.Given("wiremock testId is test3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Quantity",
                            "Time"});
                table4.AddRow(new string[] {
                            "Starter",
                            "4",
                            "18:00"});
                table4.AddRow(new string[] {
                            "Main",
                            "4",
                            "18:00"});
                table4.AddRow(new string[] {
                            "Drink",
                            "4",
                            "18:00"});
#line 31
        testRunner.Given("new order with the following items is created", ((string)(null)), table4, "Given ");
#line hidden
#line 36
        testRunner.When("get bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
        testRunner.Then("bill should be 58.40", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Type",
                            "Quantity",
                            "Time"});
                table5.AddRow(new string[] {
                            "Starter",
                            "1",
                            "18:00"});
                table5.AddRow(new string[] {
                            "Main",
                            "1",
                            "18:00"});
                table5.AddRow(new string[] {
                            "Drink",
                            "1",
                            "18:00"});
#line 38
        testRunner.When("remove from order", ((string)(null)), table5, "When ");
#line hidden
#line 43
        testRunner.And("get bill", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
        testRunner.Then("bill should be 43.80", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                OrderCreationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                OrderCreationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
